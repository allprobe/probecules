package lycus;

import java.util.ArrayList;
import java.util.HashMap;

import org.json.simple.JSONArray;

public class RunnableSnmpProbeResults extends RunnableProbeResults {

	private String stringData;
	private Double numData;
	private DataPointsRollup[] dataRollups;

	public RunnableSnmpProbeResults(RunnableProbe rp) {
		super(rp);
		switch (((SnmpProbe) rp.getProbe()).getDataType()) {
		case Numeric: {
			this.dataRollups = this.initRollupSeries(new DataPointsRollup[6]);
			this.stringData = null;
			break;
		}
		case Text: {
			this.dataRollups = null;
			this.stringData = "";
			break;
		}
		default:
			SysLogger.Record(new Log(
					"Unable to determine snmp probe type: " + rp.getRPString() + ", RP results didn't initialized!",
					LogType.Error));
		}
	}

	public String getStringData() {
		return stringData;
	}

	public void setStringData(String stringData) {
		this.stringData = stringData;
	}

	public Double getNumData() {
		return numData;
	}

	public void setNumData(Double numData) {
		this.numData = numData;
	}

	public DataPointsRollup[] getDataRollups() {
		return dataRollups;
	}

	public void setDataRollups(DataPointsRollup[] dataRollups) {
		this.dataRollups = dataRollups;
	}

	@Override
	public void acceptResults(ArrayList<Object> results) {
		long lastTimestamp = (long) results.get(0);
		if (this.getDataRollups() == null) {
			String stringData = (String) results.get(1);
			this.setLastTimestamp(lastTimestamp);
			this.setStringData(stringData);
			return;
		}
		double data;
		try {
			data = (double)results.get(1);
		} catch (NumberFormatException nfe) {
			this.setLastTimestamp(lastTimestamp);
			this.setNumData(null);
			return;
		}
		
		this.setLastTimestamp(lastTimestamp);
		this.setNumData(data);

		for (int i = 0; i < 6; i++) {
			DataPointsRollup numDataRollup = this.getDataRollups()[i];
			numDataRollup.add(lastTimestamp, data);
		}
	}

	@Override
	public void insertExistingRollups(DataPointsRollup[][] existing) {
		this.addRollupsFromExistingMemoryDump(this.getDataRollups(), existing[0]);
	}

	@Override
	public DataPointsRollup[][] retrieveExistingRollups() {
		DataPointsRollup[][] existing = new DataPointsRollup[1][6];
		existing[0] = this.getDataRollups();
		return existing;
	}

	@Override
	public HashMap<String, String> getResults() {
		HashMap<String, String> results = super.getResults();
		JSONArray rawResults = new JSONArray();
		rawResults.add(4);
		if(this.getDataRollups()==null)
		{
		rawResults.add(this.getStringData());
		this.setStringData(null);
		results.put("RAW@data@" + this.getLastTimestamp(), rawResults.toJSONString());
		return results;
		}
		rawResults.add(this.getNumData());
		this.setNumData(null);
		this.setLastTimestamp((long)0);

		results.put("RAW@data@" + this.getLastTimestamp(), rawResults.toJSONString());
		int rollupsNumber = this.getNumberOfRollupTables();
		for (int i = 0; i < rollupsNumber; i++) {

			DataPointsRollup currentDataRollup = this.getDataRollups()[i];
			DataPointsRollup finishedDataRollup = currentDataRollup.getLastFinishedRollup();

			if (currentDataRollup == null) {
				SysLogger
						.Record(new Log("Wrong Rollup Tables Number Of: " + this.getRp().getRPString(), LogType.Debug));
				continue;
			}
			if (finishedDataRollup != null) {
				JSONArray dataRollupResults = new JSONArray();
				dataRollupResults.add(finishedDataRollup.getMin());
				dataRollupResults.add(finishedDataRollup.getMax());
				dataRollupResults.add(finishedDataRollup.getAvg());
				dataRollupResults.add(finishedDataRollup.getResultsCounter());

				JSONArray fullRollupResults = new JSONArray();
				fullRollupResults.add(dataRollupResults);

				results.put("ROLLUP" + finishedDataRollup.getTimePeriod().getName() + "@data@"
						+ finishedDataRollup.getEndTime(), fullRollupResults.toJSONString());

				currentDataRollup.setLastFinishedRollup(null);
			} 
		}
		return results;
	}
}
