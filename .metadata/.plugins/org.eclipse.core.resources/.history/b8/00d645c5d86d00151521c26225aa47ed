package lycus;

import java.util.ArrayList;
import java.util.HashMap;

import org.json.simple.JSONArray;

public class RunnableWeberProbeResults extends RunnableProbeResults {

	private Integer statusCode;
	private Long responseTime;
	private DataPointsRollup[] responseTimeRollups;
	private Long pageSize;
	
	public RunnableWeberProbeResults(RunnableProbe rp) {
		super(rp);
		this.responseTimeRollups=this.initRollupSeries(new DataPointsRollup[6]);
	}

	
	public Integer getStatusCode() {
		return statusCode;
	}


	public void setStatusCode(Integer statusCode) {
		this.statusCode = statusCode;
	}


	public Long getResponseTime() {
		return responseTime;
	}


	public void setResponseTime(Long responseTime) {
		this.responseTime = responseTime;
	}


	public DataPointsRollup[] getResponseTimeRollups() {
		return responseTimeRollups;
	}


	public void setResponseTimeRollups(DataPointsRollup[] responseTimeRollups) {
		this.responseTimeRollups = responseTimeRollups;
	}


	public Long getPageSize() {
		return pageSize;
	}


	public void setPageSize(Long pageSize) {
		this.pageSize = pageSize;
	}


	@Override
	public void acceptResults(ArrayList<Object> results) {
		long lastTimestamp=(long)results.get(0);
		int statusCode=(int)results.get(1);
		long responseTime=(long)results.get(2);
		long pageSize=(long)results.get(3);
		
		this.setLastTimestamp(lastTimestamp);
		this.setStatusCode(statusCode);
		this.setResponseTime(responseTime);
		this.setPageSize(pageSize);
		
		for(int i=0;i<6;i++)
		{
			DataPointsRollup responseTimeRollup=this.getResponseTimeRollups()[i];
			responseTimeRollup.add(lastTimestamp, responseTime);
		}
	}

	@Override
	public void insertExistingRollups(DataPointsRollup[][] existing) {
		this.addRollupsFromExistingMemoryDump(this.getResponseTimeRollups(), existing[0]);
	}

	@Override
	public DataPointsRollup[][] retrieveExistingRollups() {
		DataPointsRollup[][] existing = new DataPointsRollup[1][6];
		existing[0] = this.getResponseTimeRollups();
		return existing;
	}

	@Override
	public HashMap<String,String> getResults() {
		HashMap<String, String> results = super.getResults();
		JSONArray rawResults = new JSONArray();
		rawResults.add(this.getStatusCode());
		this.setStatusCode(null);
		rawResults.add(this.getResponseTime());
		this.setResponseTime(null);
		rawResults.add(this.getPageSize());
		this.setPageSize(null);
		results.put("RAW@responseCode_responseTime_responseSize@" + this.getLastTimestamp(), rawResults.toJSONString());
		int rollupsNumber = this.getNumberOfRollupTables();
		for (int i = 0; i < rollupsNumber; i++) {
			
			DataPointsRollup currentResponseTimeRollup=this.getResponseTimeRollups()[i];
			DataPointsRollup finishedResponseTimeRollup = currentResponseTimeRollup.getLastFinishedRollup();
			
			if(currentResponseTimeRollup==null)
			{
				SysLogger.Record(new Log("Wrong Rollup Tables Number Of: "+this.getRp().getRPString(),LogType.Debug));
				continue;
			}
				if (finishedResponseTimeRollup!=null) {
					JSONArray responseTimeRollupResults = new JSONArray();
					responseTimeRollupResults.add(finishedResponseTimeRollup.getMin());
					responseTimeRollupResults.add(finishedResponseTimeRollup.getMax());
					responseTimeRollupResults.add(finishedResponseTimeRollup.getAvg());
					responseTimeRollupResults.add(finishedResponseTimeRollup.getResultsCounter());
					
					
					JSONArray fullRollupResults= new JSONArray();
					fullRollupResults.add(responseTimeRollupResults);
					
				results.put("ROLLUP" + finishedResponseTimeRollup.getTimePeriod().getName() + "@responseTime@"
						+ finishedResponseTimeRollup.getEndTime(), fullRollupResults.toJSONString());
				
				currentResponseTimeRollup.setLastFinishedRollup(null);
			}
		}
		return results;
	}
}
