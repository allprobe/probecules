package lycus;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import com.google.common.collect.Lists;

public class SnmpProbesBatch implements Runnable {
	private String batchId;//hostId@templateId@interval@batchUUID
	private SnmpManager snmpManager;
	private Map<String, RunnableProbe> snmpProbes;
	private Host host;
	private long interval;
	private boolean snmpError;

	public SnmpProbesBatch(SnmpManager SM, RunnableProbe rp) {
		this.setHost(rp.getHost());
		this.setInterval(rp.getProbe().getInterval());
		this.setSnmpProbes(new HashMap<String, RunnableProbe>());
		this.getSnmpProbes().put(rp.getRPString(), rp);
		this.batchId = this.getHost().getHostId().toString()+"@"+rp.getProbe().getTemplate_id().toString()+"@"+rp.getProbe().getInterval()+"@"+UUID.randomUUID().toString();
		;
	}

	// #region Getters/Setters

	public Host getHost() {
		return host;
	}

	public void setHost(Host host) {
		this.host = host;
	}

	public Map<String, RunnableProbe> getSnmpProbes() {
		return snmpProbes;
	}

	public void setSnmpProbes(Map<String, RunnableProbe> snmpProbes) {
		this.snmpProbes = snmpProbes;
	}

	public long getInterval() {
		return interval;
	}

	public void setInterval(long interval) {
		this.interval = interval;
	}

	public SnmpManager getSnmpManager() {
		return snmpManager;
	}

	public void setSnmpManager(SnmpManager snmpManager) {
		this.snmpManager = snmpManager;
	}

	public boolean isSnmpError() {
		return snmpError;
	}

	public void setSnmpError(boolean snmpError) {
		this.snmpError = snmpError;
	}

	public String getBatchId() {
		return batchId;
	}

	// #endregion

	public void run() {
		if (this.getHost().isHostStatus() && this.getHost().isSnmpStatus()) {
			Host host = this.getHost();
			List<RunnableProbe> snmpProbes = new ArrayList<RunnableProbe>(this
					.getSnmpProbes().values());
			List<String> listOids = new ArrayList<String>();
			for (RunnableProbe rp : snmpProbes) {
				if (rp.isActive()) {
					listOids.add(((SnmpProbe) rp.getProbe()).getOid()
							.toString());
				}
			}
			Map<String, String> response = null;
			if (host.getSnmpTemp().getVersion() == 2) {
				response = Net.Snmp2GETBULK(host.getHostIp(), host
						.getSnmpTemp().getPort(), host.getSnmpTemp()
						.getTimeout(), host.getSnmpTemp().getCommunityName(),
						listOids);
			} else if (host.getSnmpTemp().getVersion() == 3) {
				response = Net.Snmp3GETBULK(host.getHostIp(), host
						.getSnmpTemp().getPort(), host.getSnmpTemp()
						.getTimeout(), host.getSnmpTemp().getUserName(), host
						.getSnmpTemp().getAuthPass(), host.getSnmpTemp()
						.getAlgo(), host.getSnmpTemp().getCryptPass(), host
						.getSnmpTemp().getCryptType(), listOids);
			}
			if (response == null) {
				switch (Net.checkHostSnmpActive(host)) {
				case "host problem":
					SysLogger.Record(new Log(
							"Snmp Batch Failed - caused By Host: "
									+ this.getHost().toString()
									+ " didn't responsed! ", LogType.Debug));
					break;
				case "snmp problem":
					SysLogger.Record(new Log(
							"Snmp Batch Failed - caused By Snmp Template: "
									+ this.getHost().getSnmpTemp().toString(),
							LogType.Debug));
					this.setSnmpError(true);
					break;
				case "no problem":
					SysLogger.Record(new Log(
							"Snmp Batch Failed - caused By Unknown, SNMP Batch:"
									+ this.toString(),
							LogType.Error));
					break;
				}
			} else {
				long resultsTimestamp=System.currentTimeMillis();
				if(this.isSnmpError())
					this.setSnmpError(false);
				for (RunnableProbe _rp : snmpProbes) {
					if (_rp.isActive()) {
						SnmpProbe snmpProbe=(SnmpProbe) _rp.getProbe();
						String _value = response.get(snmpProbe.getOid().toString());
						if (_value != null) {
							ArrayList<Object> results=new ArrayList<Object>();
							results.add(resultsTimestamp);
							if(snmpProbe.getDataType()==SnmpDataType.Numeric)
							results.add(Double.parseDouble(_value));
							else
								results.add(_value);
							_rp.getResult().acceptResults(results);
							SysLogger.Record(new Log("Running Probe: "+_rp.getRPString()+" at Host: "+this.getHost().getHostIp()+"("+this.getHost().getName()+")"+", Results: "+results+" ...",LogType.Debug));
						} else {
							SysLogger.Record(new Log("Unable to get results for SNMP Probe: "+_rp.getRPString()+" oid issue ("+snmpProbe.getOid()+")",LogType.Info));
							// TODO wrong oid insert probe issues
						}
					}
				}
			}
		}
	}

	public void deleteSnmpProbe(RunnableProbe rp) {
	this.getSnmpProbes().remove(rp.getRPString());
	}

	public void addSnmpProbe(RunnableProbe rp) {
		this.getSnmpProbes().put(rp.getRPString(), rp);
	}
	
	@Override
	public String toString() {
		StringBuilder s = new StringBuilder("Snmp Probes Batch: "
				+ this.getBatchId() + ":\n");
		for (RunnableProbe p : this.getSnmpProbes().values()) {
			s.append(p.toString()).append("\n");
		}
		return s.toString();
	}

}
