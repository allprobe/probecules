package lycus;

import java.util.ArrayList;
import java.util.HashMap;

import org.json.simple.JSONArray;

public class RunnablePingerProbeResults extends RunnableProbeResults {

	private Integer packetLost;
	private DataPointsRollup[] packetLostRollups;
	private Long rtt;
	private DataPointsRollup[] rttRollups;
	private Integer ttl;

	public RunnablePingerProbeResults(RunnableProbe rp) {
		super(rp);
		this.packetLostRollups=this.initRollupSeries(new DataPointsRollup[6]);
		this.rttRollups=this.initRollupSeries(new DataPointsRollup[6]);
	}

	public Integer getPacketLost() {
		return packetLost;
	}

	public void setPacketLost(Integer packetLost) {
		this.packetLost = packetLost;
	}

	public DataPointsRollup[] getPacketLostRollups() {
		return packetLostRollups;
	}

	public void setPacketLostRollups(DataPointsRollup[] packetLostRollups) {
		this.packetLostRollups = packetLostRollups;
	}

	public Long getRtt() {
		return rtt;
	}

	public void setRtt(Long rtt) {
		this.rtt = rtt;
	}

	public DataPointsRollup[] getRttRollups() {
		return rttRollups;
	}

	public void setRttRollups(DataPointsRollup[] rttRollups) {
		this.rttRollups = rttRollups;
	}

	public Integer getTtl() {
		return ttl;
	}

	public void setTtl(Integer ttl) {
		this.ttl = ttl;
	}


	@Override
	public void acceptResults(ArrayList<Object> results) {
		long lastTimestamp=(long)results.get(0);
		int packetLost=(int)results.get(1);
		long rtt=(long)results.get(2);
		int ttl=(int)results.get(3);
		
		this.setLastTimestamp(lastTimestamp);
		this.setPacketLost(packetLost);
		this.setRtt(rtt);
		this.setTtl(ttl);
		
		for(int i=0;i<6;i++)
		{
			DataPointsRollup packetLostRollup=this.getPacketLostRollups()[i];
			DataPointsRollup rttRollup=this.getRttRollups()[i];
			
			packetLostRollup.add(lastTimestamp,packetLost);
			rttRollup.add(lastTimestamp,rtt);
		}
	}

	@Override
	public void insertExistingRollups(DataPointsRollup[][] existing) {
		this.addRollupsFromExistingMemoryDump(this.getPacketLostRollups(), existing[0]);
		this.addRollupsFromExistingMemoryDump(this.getRttRollups(), existing[1]);
	}

	@Override
	public DataPointsRollup[][] retrieveExistingRollups() {
		DataPointsRollup[][] existing = new DataPointsRollup[2][6];
		existing[0] = this.getPacketLostRollups();
		existing[1] = this.getRttRollups();
		return existing;
	}

	@Override
	public HashMap<String,String> getResults() {
		HashMap<String, String> results = super.getResults();
		JSONArray rawResults = new JSONArray();
		rawResults.add(1);
		rawResults.add(this.getPacketLost());
		this.setPacketLost(null);
		rawResults.add(this.getRtt());
		this.setRtt(null);
		rawResults.add(this.getTtl());
		this.setTtl(null);
		this.setLastTimestamp((long)0);
		results.put("RAW@packetLost_rtt_ttl@" + this.getLastTimestamp(), rawResults.toJSONString());
		int rollupsNumber = this.getNumberOfRollupTables();
		for (int i = 0; i < rollupsNumber; i++) {
			
			DataPointsRollup currentPacketLostRollup=this.getPacketLostRollups()[i];
			DataPointsRollup currentRttRollup=this.getRttRollups()[i];
			DataPointsRollup finishedPacketLostRollup = currentPacketLostRollup.getLastFinishedRollup();
			DataPointsRollup finishedRttRollup = currentRttRollup.getLastFinishedRollup();
			if(currentPacketLostRollup==null||currentRttRollup==null)
			{
				SysLogger.Record(new Log("Wrong Rollup Tables Number Of: "+this.getRp().getRPString(),LogType.Debug));
				continue;
			}
				if (finishedPacketLostRollup!=null&&finishedRttRollup!=null) {
					JSONArray packetLostRollupResults = new JSONArray();
					packetLostRollupResults.add(finishedPacketLostRollup.getMin());
					packetLostRollupResults.add(finishedPacketLostRollup.getMax());
					packetLostRollupResults.add(finishedPacketLostRollup.getAvg());
					packetLostRollupResults.add(finishedPacketLostRollup.getResultsCounter());
					
					JSONArray rttRollupResults = new JSONArray();
					rttRollupResults.add(finishedRttRollup.getMin());
					rttRollupResults.add(finishedRttRollup.getMax());
					rttRollupResults.add(finishedRttRollup.getAvg());
					rttRollupResults.add(finishedRttRollup.getResultsCounter());
					
					JSONArray fullRollupResults= new JSONArray();
					fullRollupResults.add(packetLostRollupResults);
					fullRollupResults.add(rttRollupResults);
					
				results.put("ROLLUP" + finishedPacketLostRollup.getTimePeriod().getName() + "@packetLost_rtt@"
						+ finishedPacketLostRollup.getEndTime(), fullRollupResults.toJSONString());
				
				currentPacketLostRollup.setLastFinishedRollup(null);
				currentRttRollup.setLastFinishedRollup(null);
			}
				else {
					if((finishedPacketLostRollup==null&&finishedRttRollup!=null)||(finishedPacketLostRollup!=null&&finishedRttRollup==null))
					{
						SysLogger.Record(new Log("Bad RunnableProbeResults: "+this.getRp().getRPString()+", DataPointsRollup values are not synced!",LogType.Error));
					}
			}
		}
		return results;
	}
}
